package clueGame;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Map;
import java.util.Random;
import java.util.Set;

/* 
 * ComputerPlayer Class: This class extends the Player class. This class will be 
 * autogenerated through randomness. 
 * It also updates the player's hand when the cards are dealt.
 * Authors: Kirana Irfano & Denisha Saviela
 * Collaborators: None
 * Date: 3/29/2023
 * Sources: None
 */

public class ComputerPlayer extends Player {

	/*
	 * constructor
	 */
	public ComputerPlayer(String name, String color, String type, BoardCell location) {
		super(name, color, type, location);
	}
	
	/*
	 * create a random suggestion based on unseen cards and what room player currentl is in.
	 */
	public Solution createSuggestion(Board board) {
		//This is the suggestion the computer will make.
		Solution suggestion = new Solution(null,null, null);
		
		Random random = new Random();
		ArrayList<Card> people = new ArrayList<Card>();
		ArrayList<Card> weapons = new ArrayList<Card>();

		//add unseen people to possible suggestions
		for (Card card : board.getPeopleCards()) {
			if (!this.seenCards.contains(card)) {
				people.add(card);
			}
		}
		
		//add unseen weapons to possible suggestions
		for (Card card : board.getWeaponCards()) {
			if (!this.seenCards.contains(card)) {
				weapons.add(card);
			}
		}
		
		// of the unseen cards, pick a random one to suggest
		suggestion.setPerson(people.get(random.nextInt(people.size())));
		suggestion.setWeapon(weapons.get(random.nextInt(weapons.size())));
		
		
		// set the room suggestion to the one we are in.
		String currentRoom = board.getRoom(this.location).getName();
		for (Card card : board.getRoomCards()) {
			if (card.getName().equals(currentRoom)) {
				suggestion.setRoom(card);
			}
		}

		return suggestion;
	}
	
	
	/*
	 * select random next location based on target list or whether or not a room has been seen yet.
	 */
	public BoardCell selectTarget(Set<BoardCell> targets, Board board) {
		Random random = new Random();
		BoardCell currentCell = null;
		boolean notSeen = false;
		BoardCell roomCell = null;
		Card roomCard = null;
		
		//set their previous location to not occupied
		this.getLocation().setOccupied(false);
		
		//create an array list of the targets so that we can get certain values
		ArrayList<BoardCell> allTargets = new ArrayList<BoardCell>();
		
		for (BoardCell cell : targets) {
			allTargets.add(cell);
		}
		
		//loop through all target cells
		for (BoardCell cell : targets) {
			//check if a room center is in the target list
			if (cell.isRoomCenter()) {
				
				//get the room of that room center
				Room r = board.getRoom(cell);
				String roomName = r.getName();
				//get the card that belongs to that room
				for (Card card : board.getRoomCards()) {
					if (card.getName().equals(roomName)) {
						roomCard = card;
					}
				}
				//check if the room has already been seen
				if (!seenCards.contains(roomCard)) {
					//if not make sure to choose that room as next area
					notSeen = true;
					roomCell = cell;
					break;
				}
			}
		}
		
		//choose the room as next location if not seen
		if (notSeen == true) {
			currentCell = roomCell;
			this.updateSeen(roomCard);
		}
		//else choose a random one
		else {
			currentCell = allTargets.get(random.nextInt((targets.size())));
		}
		//set player location and return their current cell location
		if (currentCell.isRoomCenter() && currentCell.getOccupied()) {
			System.out.println("Two + people here");
		}
		setLocation(currentCell);
		//set new location to occupied
		currentCell.setOccupied(true);
		return currentCell;
	}
	

	/**
	 * doMove: handles the computer's move.
	 */
	public BoardCell doMove(Set<BoardCell> target, Board board) {
		BoardCell newLocation = selectTarget(target, board);
		//newLocation.setOccupied(true);
		return newLocation;		
	}


}
